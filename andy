#!/bin/bash

set -e
set -x

function on_error() {
  local parent_lineno="$1"
  local message="$2"
  local code="${3:-1}"
  if [[ -n "$message" ]] ; then
    echo "Error on or near line ${parent_lineno}: ${message}; exiting with status ${code}"
  else
    echo "Error on or near line ${parent_lineno}; exiting with status ${code}"
  fi
  echo "Send http://foaas.herokuapp.com/linus/Andy/<your-name> to Andy now!"
  exit "${code}"
}
trap 'on_error ${LINENO}' ERR

on_exit(){
    echo "Andy was happy to be of service!"
}

trap on_exit EXIT

if [ ${ANDY_DIR:="none"} == "none" ]; then
  echo "Setting a default ANDY_DIR environment variable"
  export ANDY_DIR=${ANDY_DIR:="${HOME}/workspace/apps/andy/andy-dev"}
fi

if [ ! -d "${ANDY_DIR}" ]; then
  echo "ANDY_DIR directory doesn't exist, making now at ${ANDY_DIR}."
  mkdir -p `dirname ${ANDY_DIR}`
  pushd `dirname ${ANDY_DIR}`
  if hash git 2>/dev/null; then
    echo "Found git, installing Andy from git."
    git clone https://github.com/aterrel/andy andy-dev
  elif hash wget 2>/dev/null; then
    echo "Found wget, installing Andy from tarball"
    mkdir -p andy-dev
    wget https://github.com/aterrel/andy/tarball/master --output-document=aterrel-andy-master.tar.gz
    tar -xzf aterrel-andy-master.tar.gz -C andy-dev
    mv andy-dev/aterrel-andy-*/* andy-dev/aterrel-andy-*/.[!.]* andy-dev
    rmdir andy-dev/aterrel-andy-*
  else
    echo "Unable to get Andy code, please download from https://github.com/aterrel/andy and set ANDY_DIR to that dir."
    exit 1
  fi
  popd
  echo "export ANDY_DIR=${ANDY_DIR}" >> ${HOME}/.bash_local
  echo "path_prepend \$\{ANDY_DIR\}" >> ${HOME}/.bash_local
fi

source ${ANDY_DIR}/conf.sh
source ${ANDY_DIR}/util/functions.sh

ANDY_CURR_LOG=${ANDY_LOG_DIR}/current.log

if [ ! -d `dirname $ANDY_CURR_LOG` ]; then
    mkdir -p `dirname $ANDY_CURR_LOG`
fi

echo "[`date`] $@" >> ${ANDY_CURR_LOG}

not_implemented() {
    echo  "Not implemented!"
    exit 2
}

install_bashit(){
    if [ ! -d ${HOME}/.bash_it ]; then
        git clone https://github.com/revans/bash-it.git ${HOME}/.bash_it
        ln -sf ${ANDY_DIR}/configs/bash_it/themes/* ${HOME}/.bash_it/themes
    fi
}

bootstrap(){
    echo "Bootstraping user environment from ${ANDY_DIR}"
    for file in `ls -d ${ANDY_DIR}/dot_files/*`; do
        target=${HOME}/.`basename ${file}`
        [ -e ${target} ] && [ ! ${file} -ef ${target} ] && mv ${target} ${target}_bk
        ln -s -f `ls -d -1 ${file}` ${target}
    done
    ${ANDY_DIR}/bin/conda_install.sh
    if [ `uname` == "Linux" ]; then
        sudo ${ANDY_DIR}/bin/ubuntu_install.sh
    elif [ `uname` == "Darwin" ]; then
        ${ANDY_DIR}/bin/darwin_install.sh
    fi

    install_bashit
}

install_package() {
    echo "Trying to install with conda"
    exit_status=0
    conda install $1 || exit_status=1
    if [ ${exit_status} -ne 0 ]; then
        echo "Trying to install with pip"
        exit_status=0
        pip install $1 || exit_status=1
    fi

    if [ ${exit_status} -ne 0 ]; then
        echo "Trying to use system installer"
        exit_status=0
        if [ `uname` == "Darwin" ]; then
            brew install $1 || exit_status=1
            exit_status=${PIPESTATUS[1]}
        elif [ `uname` == "Linux" ]; then
            sudo apt-get install $1 || exit_status=1
            exit_status=${PIPESTATUS[1]}
        else
            echo "  Oops, I don't know how to use your system installer!"
            exit_status=1
        fi
    fi
    exit ${exit_status}
}

install_script() {
    ./$1
}

pass_through() {
    exec $@
}

print_usage() {
    echo "Welcome to my menu! Here are a few commands for you to consider on your next visit!"
    echo "    bootstrap              -> I will set up your user environment according to your preference."
    echo "    install [package name] -> I will attempt to install a package you have requested."
    echo "    script [script name]   -> I will attempt to run a script you have requested."
    echo "    working [message]      -> I will record your working status."
    echo "    help [command]         -> I will print this message again or more information about a specific command."
    echo "Any other commands I will attempt to execute directly recording your wish."
}

if [ $# -eq 0 ]; then
    echo "Welcome sir! How may I be of assistance"
elif [ $1 == "bootstrap" ]; then
    bootstrap
elif [ $1 == "install" ]; then
    install_package $2
elif [ $1 == "script" ]; then
    install_script $2
elif [ $1 == "working" ]; then
    :
elif [ $1 == "help" ]; then
    print_usage
else
    pass_through $@
fi
